@using Microsoft.Extensions.Configuration;
@using Microsoft.AspNetCore.Http
@inject IConfiguration Configuration;

@{
    ViewBag.Title = "BetterProduct Edit";
    string apiUrl = Configuration.GetValue<string>("WebAPIBaseUrl");
}


<style>
    .btn-success {
        color: #fff;
        background: #3b16cc !important;
        border-color: #3b16cc;
    }

    a {
        color: #3b16cc;
    }
</style>
<!-- PAGE-HEADER -->
<div class="page-header">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="#"><i class="fe fe-file-text mr-1"></i>Admin Consol</a></li>
        <li class="breadcrumb-item active" aria-current="page">BetterProduct Edit</li>
    </ol>
    <div class="ml-auto">
        <a href="~/BetterProduct/BetterProductList" class="btn btn-primary btn-icon btn-sm text-white mr-2">
            <span>
                <i class="fe fe-plus"></i>
            </span>BetterProduct View
        </a>
    </div>
</div>
<!-- PAGE-HEADER END -->

<div class="row">
    <div class="col-md">
        <div class="card overflow-hidden">
            <div class="card-header">
                <h3 class="card-title">BetterProduct Edit</h3>
            </div>


            <form action="#" role="form" class="validate" id="formPost">
                <div class="row">
                    <div class="col-lg-12">

                        <div class="col-lg-3">
                            <div class="form-group">
                                <label class="control-label">Image Upload</label>
                                <input type="file" class="form-control" id="image" />
                            </div>
                        </div>
                        <div class="col-lg-2">
                            <div class="text-center">
                                <img id="getimg" src="" width="90" class="rounded-circle" />
                            </div>
                        </div>

                        <div class="card">
                            <ejs-richtexteditor id="editor1" name="editor1" showCharCount="true" actionBegin="handleFullScreen" actionComplete="actionCompleteHandler" created="created" height="500px">
                                <e-content-template>

                                </e-content-template>
                                <e-richtexteditor-toolbarsettings items="@ViewBag.tools"></e-richtexteditor-toolbarsettings>
                                <e-richtexteditor-quicktoolbarsettings table="@ViewBag.table"></e-richtexteditor-quicktoolbarsettings>

                            </ejs-richtexteditor>
                        </div>
                       

                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-6">
                        <button type="button" id="SaveBtn" class="btn btn-primary">Update</button>

                    </div>
                </div>
            </form>
        </div>
    </div>
</div>


<script>
    var rteObj, myCodeMirror, textArea;
    function created() {
        rteObj = this;
        textArea = rteObj.contentModule.getEditPanel();
    }
    function mirrorConversion(e) {
        var id = rteObj.getID() + 'mirror-view';
        var mirrorView = rteObj.element.querySelector('#' + id);
        var charCount = rteObj.element.querySelector('.e-rte-character-count');
        if (e.targetItem === 'Preview') {
            textArea.style.display = 'block';
            mirrorView.style.display = 'none';
            textArea.innerHTML = myCodeMirror.getValue();
            charCount.style.display = 'block';
        }
        else {
            if (!mirrorView) {
                mirrorView = ej.base.createElement('div', { className: 'e-content' });
                mirrorView.id = id;
                textArea.parentNode.appendChild(mirrorView);
            }
            else {
                mirrorView.innerHTML = '';
            }
            textArea.style.display = 'none';
            mirrorView.style.display = 'block';
            renderCodeMirror(mirrorView, defaultRTE.value);
            charCount.style.display = 'none';
        }
    }
    function renderCodeMirror(mirrorView, content) {
        myCodeMirror = CodeMirror(mirrorView, {
            value: content,
            lineNumbers: true,
            mode: 'text/html',
            lineWrapping: true,
        });
    }
    function handleFullScreen(e) {
        var sbCntEle = document.querySelector('.sb-content.e-view');
        var sbHdrEle = document.querySelector('.sb-header.e-view');
        if (e.targetItem === 'Maximize') {
            if (ej.base.Browser.isDevice && ej.base.Browser.isIos) {
                ej.base.addClass([sbCntEle, sbHdrEle], ['hide-header']);
            }
        }
        else if (e.targetItem === 'Minimize') {
            if (ej.base.Browser.isDevice && ej.base.Browser.isIos) {
                ej.base.removeClass([sbCntEle, sbHdrEle], ['hide-header']);
            }
        }
    }
    function actionCompleteHandler(e) {
        if (e.targetItem && (e.targetItem === 'SourceCode' || e.targetItem === 'Preview')) {
            this.sourceCodeModule.getPanel().style.display = 'none';
            mirrorConversion(e);
        }
        else {
            setTimeout(function () { rteObj.toolbarModule.refreshToolbarOverflow(); }, 1000);
        }
    }
</script>

@section scripts{
   

    
    <script>

        var betterProductId = @ViewBag.betterProductId
            loadSinglebetterProduct()
        function loadSinglebetterProduct() {
            $.ajax({
                type: "GET",
                url: "@apiUrl/api/BetterProduct/GetSingleBetterProduct/" + betterProductId,
                contentType: "application/json; charset=utf-8",
                headers: {
                    "authorization": "Bearer @Context.Session.GetString("TokenTxt")"
                },
                dataType: "json",
                success: function (data) {
                    //console.log(data);
                    if (data) {

                        rteObj.value = data.text;
                       
                        $('#getimg').attr('src', data.imageUpload);

                        // loadParent();
                    }
                    else {
                        sweetAlert("Validation Alert!", "Something unexpected!", "warning");
                    }
                },
                error: function (data) {
                    if (data.status == 401) {
                        window.location.replace('/Message/TokenExpire');
                    } else if (data.status == 403) {
                        window.location.replace('/Message/Unauthorize');
                    }
                }
            });
        }

        $("#SaveBtn").click(function (e) {
            if (!document.getElementById("formPost").checkValidity()) {
                e.preventDefault();
            } else {
                imgPath = '';
                var currentImageSrc = '';
                currentImageSrc = $('#getimg').attr('src');

                if ($('#image').val() != '' && $('#image').val() != 'Choose file') {
                    uploadFile();
                } else if (currentImageSrc != '') {
                    imgPath = currentImageSrc;
                }

                var model = {
                    betterProductId: betterProductId,
                    imageUpload: imgPath,
                    text: rteObj.value,
                    updatedBy: @Context.Session.GetInt32("UserId"),
                }
               
                $.ajax({
                    type: "POST",
                    url: "@apiUrl/api/BetterProduct/UpdateBetterProduct",
                    data: JSON.stringify(model),
                    contentType: "application/json; charset=utf-8",
                    headers: {
                        "authorization": "Bearer @Context.Session.GetString("TokenTxt")"
                    },

                    success: function (data, statusText, xhr) {
                       
                        if (xhr.status === 200) {
                            $('#page_Tb').DataTable().ajax.reload(null, false);
                            sweetAlert({
                                html: true,
                                icon: "success",
                                title: "BetterProduct",
                                text: "Successfully updated!",
                                type: "success"
                            });
                        } else if (data.status === "duplicate") {
                            sweetAlert("Validation Alert!", data.responseMsg, "warning");
                        } else if (data.status === "error") {
                            sweetAlert("Validation Alert!", data.responseMsg, "warning");
                        } else {
                            sweetAlert("Validation Alert!", "Something unexpected!", "warning");
                        }
                    },
                    error: function (data) {
                        
                        if (data.status == 401) {
                            window.location.replace('/Message/TokenExpire');
                        } else if (data.status == 403) {
                            window.location.replace('/Message/Unauthorize');
                        } else if (data.status == 400) {
                            sweetAlert("Validation Alert!", "Please check input data!", "warning");
                        }
                    }
                });
            }
        });

        function uploadFile() {
            var totalFiles = document.getElementById('image').files.length;
            if (totalFiles > 0) {
                var formData = new FormData();
                var files = document.getElementById('image').files;
                formData.append("file", files[0]);
                $.ajax(
                    {
                        url: "/Upload/ImgUpload",
                        data: formData,
                        processData: false,
                        contentType: false,
                        async: false,
                        type: "POST",
                        success: function (data) {
                            imgPath = data;
                            $('#getimg').attr('src', imgPath);
                            resetInputFile('#formPost');
                        }
                    }
                );
            }

        }

    </script>
}